services:
  traefik:
    image: traefik:v3
    command:
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --api.dashboard=true
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  whoami:
    image: traefik/whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.who.rule=PathPrefix(`/who`)
      - traefik.http.routers.who.entrypoints=web
    restart: unless-stopped

  # === Your app API ===
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file: .env
    environment:
      # Make sure Alembic/app read this:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      # add any app secrets/vars above in .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=PathPrefix(`/api`)
      - traefik.http.routers.api.entrypoints=web
      # If your app serves at "/" and you want "/api/*" externally, strip the prefix:
      - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
      - traefik.http.routers.api.middlewares=api-strip
      # Tell Traefik which port your app listens on inside the container:
      - traefik.http.services.api.loadbalancer.server.port=8000
    restart: unless-stopped

  postgres:
    image: postgres:16
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 6
    restart: unless-stopped

  redis:
    image: redis:7
    command: ["redis-server","--appendonly","yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 6
    restart: unless-stopped

  adminer:
    image: adminer:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=PathPrefix(`/db`)
      - traefik.http.routers.adminer.entrypoints=web
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    depends_on: [postgres]
    restart: unless-stopped

  redisinsight:
    image: redis/redisinsight:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.redisins.rule=PathPrefix(`/redis`)
      - traefik.http.routers.redisins.entrypoints=web
      - traefik.http.services.redisins.loadbalancer.server.port=5540
    depends_on: [redis]
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:

